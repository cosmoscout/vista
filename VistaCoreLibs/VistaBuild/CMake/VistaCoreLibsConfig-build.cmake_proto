set( VISTACORELIBS_ROOT_DIR "@_PACKAGE_ROOT_DIR@" )
set( VISTACORELIBS_LIBRARY_DIRS "@_PACKAGE_LIBRARY_DIRS@" )
set( VISTACORELIBS_INCLUDE_DIRS "@_PACKAGE_INCLUDE_DIRS@" )
set( @_PACKAGE_NAME_UPPER@_DEFINITIONS "@_PACKAGE_DEFINITIONS@" )
set( VISTACORELIBS_HWARCH "@VISTA_HWARCH@" )
set( VISTACORELIBS_COMPONENTS "@VISTACORELIBS_COMPONENTS@" )
set( @_PACKAGE_NAME_UPPER@_SHADER_DIRS "@_PACKAGE_SHADER_DIRS@" )

set( VISTACORELIBS_VERSION @VISTACORELIBS_VERSION@ )
set( VISTACORELIBS_VERSION_EXT @VISTACORELIBS_VERSION_EXT@ )

set( VISTACORELIBS_DRIVER_PLUGIN_DIRS )
foreach( _DIR ${VISTACORELIBS_LIBRARY_DIRS} )
	string( REGEX MATCH ".*DriverPlugins" _MATCH "${_DIR}" )
	if( _MATCH )
		list( APPEND VISTACORELIBS_DRIVER_PLUGIN_DIRS "${_DIR}" )
	endif( _MATCH )
endforeach( _DIR ${VISTACORELIBS_LIBRARY_DIRS} )
list( APPEND VISTACORELIBS_INCLUDE_DIRS ${VISTACORELIBS_DRIVER_PLUGIN_DIRS} )

# these will be filled later depending on selected components
set( VISTACORELIBS_LIBRARIES )
set( VISTACORELIBS_FOUND_COMPONENTS )
set( VISTACORELIBS_MSVC_PROJECT  )

# per-componennt info
set( VISTABASE_FOUND								FALSE )
set( VISTABASE_INTERNAL_DEPENDENCIES 				@VISTABASE_INTERNAL_DEPENDENCIES@ )
set( VISTABASE_MSVC_PROJECT							PROJ VistaBase
													@VISTABASE_TARGET_MSVC_PROJECT@ )
set( VISTAASPECTS_FOUND								FALSE )
set( VISTAASPECTS_INTERNAL_DEPENDENCIES 			@VISTAASPECTS_INTERNAL_DEPENDENCIES@ )
set( VISTAASPECTS_MSVC_PROJECT						PROJ VistaAspects
													@VISTAASPECTS_TARGET_MSVC_PROJECT@ )
set( VISTAINTERPROCCOMM_FOUND						FALSE )
set( VISTAINTERPROCCOMM_INTERNAL_DEPENDENCIES		@VISTAINTERPROCCOMM_INTERNAL_DEPENDENCIES@ )
set( VISTAINTERPROCCOMM_MSVC_PROJECT				PROJ VistaInterProcComm
													@VISTAINTERPROCCOMM_TARGET_MSVC_PROJECT@ )
set( VISTAMATH_FOUND								FALSE )
set( VISTAMATH_INTERNAL_DEPENDENCIES				@VISTAMATH_INTERNAL_DEPENDENCIES@ )
set( VISTAMATH_MSVC_PROJECT							PROJ VistaMath
													@VISTAMATH_TARGET_MSVC_PROJECT@ )
set( VISTATOOLS_FOUND								FALSE )
set( VISTATOOLS_INTERNAL_DEPENDENCIES				@VISTATOOLS_INTERNAL_DEPENDENCIES@ )
set( VISTATOOLS_MSVC_PROJECT						PROJ VistaTools
													@VISTATOOLS_TARGET_MSVC_PROJECT@ )
set( VISTADEVICEDRIVERSBASE_FOUND					FALSE )
set( VISTADEVICEDRIVERSBASE_INTERNAL_DEPENDENCIES	@VISTADEVICEDRIVERSBASE_INTERNAL_DEPENDENCIES@ )
set( VISTADEVICEDRIVERSBASE_MSVC_PROJECT			PROJ VistaDeviceDriversBase
													@VISTADEVICEDRIVERSBASE_TARGET_MSVC_PROJECT@ )
set( VISTADATAFLOWNET_FOUND							FALSE )
set( VISTADATAFLOWNET_INTERNAL_DEPENDENCIES			@VISTADATAFLOWNET_INTERNAL_DEPENDENCIES@ )
set( VISTADATAFLOWNET_MSVC_PROJECT					PROJ VistaDataFlowNet
													@VISTADATAFLOWNET_TARGET_MSVC_PROJECT@ )
set( VISTAKERNEL_FOUND								FALSE )
set( VISTAKERNEL_INTERNAL_DEPENDENCIES				@VISTAKERNEL_INTERNAL_DEPENDENCIES@ )
set( VISTAKERNEL_MSVC_PROJECT						PROJ VistaKernel
													@VISTAKERNEL_TARGET_MSVC_PROJECT@ )
set( VISTAKERNELOPENSGEXT_FOUND						FALSE )
set( VISTAKERNELOPENSGEXT_INTERNAL_DEPENDENCIES		@VISTAKERNELOPENSGEXT_INTERNAL_DEPENDENCIES@ )
set( VISTAKERNELOPENSGEXT_MSVC_PROJECT				PROJ VistaKernelOpenSGExt
													@VISTAKERNELOPENSGEXT_TARGET_MSVC_PROJECT@ )
set( VISTAOGLEXT_FOUND								FALSE )
set( VISTAOGLEXT_INTERNAL_DEPENDENCIES				@VISTAOGLEXT_INTERNAL_DEPENDENCIES@ )
set( VISTAOGLEXT_MSVC_PROJECT						PROJ VistaOGLExt
															@VISTAOGLEXT_TARGET_MSVC_PROJECT@ )

set( VISTACORELIBS_MSVC_PROJECT )
set( VISTACORELIBS_LIBRARIES )
set( VISTACORELIBS_MSVC_PROJECT )
													
macro( _local_vcl_use_component _COMPONENT )
	string( TOUPPER ${_COMPONENT} _COMPONENT_UPPER )
	if( NOT ${_COMPONENT_UPPER}_FOUND ) # we may already have included it
		list( FIND VISTACORELIBS_COMPONENTS ${_COMPONENT} _COMPONENT_FOUND )
		if( _COMPONENT_FOUND EQUAL -1 )
			if( VistaCoreLibs_FIND_REQUIRED_${_COMPONENT} )
				message( SEND_ERROR "VistaCoreLibsConfig - Component \"${_COMPONENT}\" not available" )
			elseif( NOT VistaCoreLibs_FIND_QUIETLY )
				message( WARNING "VistaCoreLibsConfig - Component \"${_COMPONENT}\" not available" )
			endif( VistaCoreLibs_FIND_REQUIRED_${_COMPONENT} )
		else( _COMPONENT_FOUND EQUAL -1 )
			set( ${_COMPONENT_UPPER}_FOUND TRUE )
			
			foreach( _INTERNAL_DEPENDENCY ${${_COMPONENT_UPPER}_INTERNAL_DEPENDENCIES} )
				_local_vcl_use_component( ${_INTERNAL_DEPENDENCY} )
			endforeach( _INTERNAL_DEPENDENCY ${${_COMPONENT_UPPER}_INTERNAL_DEPENDENCIES} )
			
			string( TOUPPER ${_COMPONENT} _COMPONENT_UPPER )
			
			set( ${_COMPONENT_UPPER}_LIBRARIES optimized ${_COMPONENT} debug ${_COMPONENT}D )
			set( ${_COMPONENT_UPPER}_LIBRARY_DIRS ${VISTACORELIBS_LIBRARY_DIRS} )
			set( ${_COMPONENT_UPPER}_INCLUDE_DIRS ${VISTACORELIBS_INCLUDE_DIRS} )
			set( ${_COMPONENT_UPPER}_DEFINITIONS ${VISTACORELIBS_DEFINITIONS} )
			 # prepend libraries to achieve correct static linking order
			set( VISTACORELIBS_LIBRARIES ${${_COMPONENT_UPPER}_LIBRARIES} ${VISTACORELIBS_LIBRARIES} )
			list( APPEND VISTACORELIBS_FOUND_COMPONENTS ${_COMPONENT} )
			if( WIN32 )
				list( APPEND VISTACORELIBS_MSVC_PROJECT ${${_COMPONENT_UPPER}_MSVC_PROJECT} DEP ${${_COMPONENT_UPPER}_INTERNAL_DEPENDENCIES} )
			endif()

		endif( _COMPONENT_FOUND EQUAL -1 )
	endif( NOT ${_COMPONENT_UPPER}_FOUND )
endmacro( _local_vcl_use_component _COMPONENT )

# Add platform defines
if(UNIX)
	set( VISTACORELIBS_DEFINITIONS -DLINUX )
elseif(WIN32)
	set( VISTACORELIBS_DEFINITIONS -DWIN32 )
endif(UNIX)

if( NOT VistaCoreLibs_FIND_COMPONENTS )
	#just add everything we got
	foreach( _COMPONENT ${VISTACORELIBS_COMPONENTS} )
		string( TOUPPER ${_COMPONENT} _COMPONENT_UPPER )
		set( ${_COMPONENT_UPPER}_FOUND TRUE )
		set( ${_COMPONENT_UPPER}_LIBRARIES )
		set( ${_COMPONENT_UPPER}_LIBRARY_DIRS "${VISTACORELIBS_LIBRARY_DIRS}" )
		set( ${_COMPONENT_UPPER}_INCLUDE_DIRS "${VISTACORELIBS_INCLUDE_DIRS}" )
		set( ${_COMPONENT_UPPER}_DEFINITIONS "${VISTACORELIBS_DEFINITIONS}" )
		# prepend libraries to achieve correct static linking order
		set( VISTACORELIBS_LIBRARIES  optimized ${_COMPONENT} debug ${_COMPONENT}D ${VISTACORELIBS_LIBRARIES} )
		if( WIN32 )
			list( APPEND VISTACORELIBS_MSVC_PROJECT ${${_COMPONENT_UPPER}_MSVC_PROJECT} DEP ${${_COMPONENT_UPPER}_INTERNAL_DEPENDENCIES} )
		endif()
	endforeach( _COMPONENT ${VISTACORELIBS_COMPONENTS} )
else( NOT VistaCoreLibs_FIND_COMPONENTS )
	# we add the requested components, as well as components it depends on
	foreach( _COMPONENT ${VistaCoreLibs_FIND_COMPONENTS} )
		_local_vcl_use_component( ${_COMPONENT} )
	endforeach( _COMPONENT ${VistaCoreLibs_FIND_COMPONENTS} )
endif( NOT VistaCoreLibs_FIND_COMPONENTS )

# depending on whether or not the Kernel is used, we may need additional dependencies
if( VISTAKERNEL_FOUND )
	set( VISTACORELIBS_DEPENDENCIES @VISTAKERNEL_DEPENDENCIES@ )
else()
	set( VISTACORELIBS_DEPENDENCIES )
endif()

set( VISTACORELIBS_FOUND TRUE )
