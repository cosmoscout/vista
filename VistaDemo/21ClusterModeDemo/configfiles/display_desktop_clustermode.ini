#######################################################################
#        V I S T A     I N I T I A L I Z A T I O N     F I L E        #
#######################################################################
# 
#
#######################################################################

# we use some file-scope variables, for easier editing in multiple sections
[FILE_VARIABLES]
LEFT_EYE_OFFSET		= -0.03, 0, 0
RIGHT_EYE_OFFSET	= +0.03, 0, 0
VIEWER_POSITION		= 0, 0, 0
VIEWER_ORIENTATION	= 0, 0, 0, 1
PROJ_CENTER         = 0, 0, -1
CLIPPING_RANGE      = 0.05, 666.0

MASTER_VSYNC_MODE   = TRUE
SLAVE_VSYNC_MODE    = TRUE


# the display system in this section specifies the one that will be chosen in
# desktop mode
[SYSTEM]
DISPLAYSYSTEMS		= DISPLAY_MASTER

[DesktopMaster]
# NAME is the name of this node (incredible!)
NAME				= DesktopMaster
# SLAVES lists all the slave to be started in this cluster configuration
SLAVES              = DesktopSlave1, DesktopSlave2
# The display system for this node
DISPLAYSYSTEMS      = DISPLAY_MASTER

# in cluster mode, there are different synchronization methods available,
# with different utilizations, which we can choose here. We'll only discuss settings
# for the new cluster mode (newclustermaster/newclusterslave), the old one is only
# left for compatibility.

# The DATASYNCTYPE specifies the method to distribute data from the master
# to the slaves. It will be used for distribution of events by the ClusterMode,
# and the ClusterDataSync object. Available options are:
#   DUMMY           a dummy datasync does not actually sync (used for standalone mode)
#   TCP             data is distributed over TCP/IP connections to each slaves.
#                   since a separate connection is used for each slave, this may lead
#                   to high bandwidth usage when many slaves are present
#   ZEROMQ          Only available if the VistaKernel has been build with ZeroMQ+PGM support
#                   Uses the PGM reliable multicast protocol over ZeroMQ to distribute data,
#                   which requires no additional bandwidth for many slaves.
#   INTERPROC       distributes data over interprocess shared memory, and thus only
#                   works when all nodes run on the same machine
# We'll use TCP here, since we only have two slaves and don't know if VistaKernel
# was built with ZeroMQ/PGM support. We could use InterProc, but TCP is more commonly used.
DATASYNCTYPE        = TCP
# The BARRIERTYPE specifies the method used for barriers, a method to wait until all nodes
# reach a certain computation state, and then sends out a GO signal to all nodes at once.
# Available options are:
#   DUMMY           a dummy barrier that does not actually wait (used for clustermode)
#   TCP             All slaves report their ready-state over a TCP/IP connection, and
#                   the GO signal is also sent over TCP/IP connections from master to slave.
#                   Notice that due to the sequential sending of GO using multiple connections,
#                   the GO signal may arrive at slaves at non-negligibly different times.
#   BROADCAST       All slaves report their ready-state over a TCP/IP connection, and
#                   the GO signal is sent using a broadcast UDP/IP packet.
#                   Especially for many slavs, the GO signal should have signigicantly less
#                   variation of arrival time on the slaves than for TCP
#   INTERPROC       Uses interproc mutexes (mutices?), so it will only work on one machine
# usually we would use broadcast - however, on localhost broadcasting doesn't always work
# properly, so lets stick to TCP
BARRIERTYPE         = TCP
# The SWAPSYNCTYPE specifies the mode to be used for swap syncing, which is performed
# after rendering, before buffers are swapped to display the rendered images.
# This helps to reduce tearing, where different parts of the image show the application
# state at different timestamps, especially when combined with genlocking.
# There are different options
#   DUMMY | TCP | BROADCAST | INTERPROC are the same as for BARRIERTYPE
#   DEFAULT         Uses the same mode as BARRIERTYPE
#   GSYNC           Uses nVidia-specific OpenGL extensions for framelocking. This mode only
#                   works with nVidia graphics cards that are synchronized in a GSync ring
SWAPSYNCTYPE        = TCP

# depending on the DataSync/Barrier/SwapSync, different settings are required 
# TCP/IP connection related settings are not specified in the master config settings, but
# for each slave

# if the BARRIERTYPE or SWAPSYNCTYPE is Broadcast, a broadcast address is required
# BC addresses usually look like something 192.168.0.255, but we use localhost here.
BROADCASTIP         = localhost
# The range of ports can be used to specify a free port range (default: 24000-24999).
BROADCASTPORTS      = 15000-15999  

# If we would be using ZEROMQ as datasync method, we have to specify a zeromq address
# this uses the format epgm://ADAPTER:IP, where ADAPTER is the netwerk interface,
# and IP is a valid mutlicast address
# ZEROMQ_ADDRESS	= epgm://eth1;224.1.1.29
# ZEROMQ_PORTS      = 19000-19999


# Now, we specify a section for each of the two slaves, DesktopSLAVE1 and DesktopSLAVE1
[DesktopSlave1]
NAME				= DesktopSlave1
# we use a different display for each node, to render different parts of the scene
DISPLAYSYSTEMS      = DISPLAY_SLAVE1
# The IP of the node where the slave runs - the master will connect here
SLAVEIP             = localhost
# The port of the initial socket on which teh slave will wait for the master
SLAVEPORT           = 18971
# Additional ports dor additional connections, e.g. for Barriers and DataSyncs
FREEPORTS           = 18800-18899
# When rendering with OpenGL, gl calls are only queued and are processed asynchronously
# by the graphics card. This can cause problems with swap syncing, because the display swap
# may be delayed by outstanding rendering tasks, leading to tearing. Thus, if swapsyncing is
# active (which it should always be), DOGLFINISH tells the cluster mode to wait until all
# rendering has finished before indicating readiness for a swap.
DOGLFINISH          = TRUE
# Should we swap bytes due to different endianess of the systems? Usually foes not need to
# be specified, as the cluster mode explicitly tests this
BYTESWAP            = FALSE
# if the DataSync or Barrier mode is INTERPROC, we have to specify a name
# INTERPROC_NAME	= SLAVE1

[DesktopSlave2]
NAME				= DesktopSlave2
DISPLAYSYSTEMS		= DISPLAY_SLAVE2
SLAVEIP             = localhost
# we have to use separate ports, because we run on the same machine
SLAVEPORT           = 19971
DOGLFINISH          = TRUE
FREEPORTS           = 19800-19899
# INTERPROC_NAME	= SLAVE2



# We now setup the displays such that the master renders the left part,
# SLAVE1 renders the center, and SLAVE1 renders the right part

#######################################################################
# MASTER
#######################################################################

[DISPLAY_MASTER]
NAME				=	MAIN
VIEWPORTS 			= 	MASTER_VIEWPORT
VIEWER_POSITION		=	${VIEWER_POSITION}
VIEWER_ORIENTATION	=	${VIEWER_ORIENTATION}
LEFT_EYE_OFFSET		=	${LEFT_EYE_OFFSET}
RIGHT_EYE_OFFSET	=	${RIGHT_EYE_OFFSET}

[MASTER_VIEWPORT]
NAME				=	MAIN_VIEWPORT
PROJECTION			=	MASTER_PROJECTION
WINDOW				=	MASTER_WINDOW

[MASTER_PROJECTION]
NAME				=	MAIN_PROJECTION
PROJ_PLANE_MIDPOINT	=	${PROJ_CENTER}
PROJ_PLANE_NORMAL	=	0, 0, 1
PROJ_PLANE_UP		=	0, 1, 0
PROJ_PLANE_EXTENTS	=	-0.4, 0.4, -0.9, 0.9
CLIPPING_RANGE		=	${CLIPPING_RANGE}
STEREO_MODE			=	MONO

[MASTER_WINDOW]
NAME				=	MAIN_WINDOW
STEREO				=	false
POSITION			=	421,20
SIZE				=	400,900
FULLSCREEN			=   false
TITLE         	 	=   Master
DRAW_BORDER			=	false

#######################################################################
# SLAVE
#######################################################################

[DISPLAY_SLAVE1]
NAME				=	MAIN
VIEWPORTS 			= 	SLAVE1_VIEWPORT
VIEWER_POSITION		=	${VIEWER_POSITION}
VIEWER_ORIENTATION	=	${VIEWER_ORIENTATION}
LEFT_EYE_OFFSET		=	${LEFT_EYE_OFFSET}
RIGHT_EYE_OFFSET	=	${RIGHT_EYE_OFFSET}

[SLAVE1_VIEWPORT]
NAME				=	MAIN_VIEWPORT
PROJECTION			=	SLAVE1_PROJECTION
WINDOW				=	SLAVE1_WINDOW

[SLAVE1_PROJECTION]
NAME				=	MAIN_PROJECTION
PROJ_PLANE_MIDPOINT	=	${PROJ_CENTER}
PROJ_PLANE_NORMAL	=	0, 0, 1
PROJ_PLANE_UP		=	0, 1, 0
PROJ_PLANE_EXTENTS	=	-1.2, -0.4, -0.9, 0.9
CLIPPING_RANGE		=	${CLIPPING_RANGE}
STEREO_MODE			=	MONO

[SLAVE1_WINDOW]
NAME				=	MAIN_WINDOW
STEREO				=	false
POSITION			=	20,20
SIZE				=	400,900
FULLSCREEN			=   false
TITLE         	 	=   Slave1
DRAW_BORDER			=	false

#######################################################################
# SLAVE1
#######################################################################

[DISPLAY_SLAVE2]
NAME				=	MAIN
VIEWPORTS 			= 	SLAVE2_VIEWPORT
VIEWER_POSITION		=	${VIEWER_POSITION}
VIEWER_ORIENTATION	=	${VIEWER_ORIENTATION}
LEFT_EYE_OFFSET		=	${LEFT_EYE_OFFSET}
RIGHT_EYE_OFFSET	=	${RIGHT_EYE_OFFSET}

[SLAVE2_VIEWPORT]
NAME				=	MAIN_VIEWPORT
PROJECTION			=	SLAVE2_PROJECTION
WINDOW				=	SLAVE2_WINDOW

[SLAVE2_PROJECTION]
NAME				=	MAIN_PROJECTION
PROJ_PLANE_MIDPOINT	=	${PROJ_CENTER}
PROJ_PLANE_NORMAL	=	0, 0, 1
PROJ_PLANE_UP		=	0, 1, 0
PROJ_PLANE_EXTENTS	=	0.4, 1.2, -0.9, 0.9
CLIPPING_RANGE		=	${CLIPPING_RANGE}
STEREO_MODE			=	MONO

[SLAVE2_WINDOW]
NAME				=	MAIN_WINDOW
STEREO				=	false
POSITION			=	822,20
SIZE				=	400,900
FULLSCREEN			=   false
TITLE         	 	=   Slave2
DRAW_BORDER			=	false
